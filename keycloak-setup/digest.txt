Directory structure:
‚îî‚îÄ‚îÄ keycloak-setup/
    ‚îú‚îÄ‚îÄ backend_cli_id.json
    ‚îú‚îÄ‚îÄ frontend_cli_id.json
    ‚îú‚îÄ‚îÄ keycloak-setup-back.js
    ‚îú‚îÄ‚îÄ keycloak-setup-front.js
    ‚îî‚îÄ‚îÄ keycloak-setup.js

================================================
File: backend_cli_id.json
================================================
{
  "clientId": "backend_cli_id",
  "name": "",
  "description": "",
  "surrogateAuthRequired": false,
  "enabled": true,
  "alwaysDisplayInConsole": false,
  "clientAuthenticatorType": "client-secret",
  "redirectUris": [
    "http://localhost:2000/*"
  ],
  "webOrigins": [
    "*"
  ],
  "notBefore": 0,
  "bearerOnly": true,
  "consentRequired": false,
  "standardFlowEnabled": true,
  "implicitFlowEnabled": false,
  "directAccessGrantsEnabled": true,
  "serviceAccountsEnabled": true,
  "publicClient": false,
  "frontchannelLogout": false,
  "protocol": "openid-connect",
  "attributes": {
    "realm_client": "false",
    "oidc.ciba.grant.enabled": "false",
    "backchannel.logout.session.required": "true",
    "post.logout.redirect.uris": "+",
    "oauth2.device.authorization.grant.enabled": "false",
    "backchannel.logout.revoke.offline.tokens": "false",
    "exclude.session.state.from.auth.response": "false"
  },
  "authenticationFlowBindingOverrides": {},
  "fullScopeAllowed": true,
  "nodeReRegistrationTimeout": -1,
  "defaultClientScopes": [
    "web-origins",
    "service_account",
    "acr",
    "profile",
    "roles",
    "basic",
    "email"
  ],
  "optionalClientScopes": [
    "address",
    "phone",
    "organization",
    "offline_access",
    "microprofile-jwt"
  ],
  "access": {
    "view": true,
    "configure": true,
    "manage": true
  }
}


================================================
File: frontend_cli_id.json
================================================
{
  "clientId": "frontend_cli_id",
  "surrogateAuthRequired": false,
  "enabled": true,
  "alwaysDisplayInConsole": false,
  "clientAuthenticatorType": "client-secret",
  "redirectUris": [
    "http://localhost:2000/*",
    "undefined/*",
    "http://localhost:5173/*"
  ],
  "webOrigins": [
    "*"
  ],
  "notBefore": 0,
  "bearerOnly": false,
  "consentRequired": false,
  "standardFlowEnabled": true,
  "implicitFlowEnabled": false,
  "directAccessGrantsEnabled": true,
  "serviceAccountsEnabled": false,
  "publicClient": true,
  "frontchannelLogout": false,
  "protocol": "openid-connect",
  "attributes": {
    "realm_client": "false",
    "post.logout.redirect.uris": "+",
    "exclude.session.state.from.auth.response": "false"
  },
  "authenticationFlowBindingOverrides": {},
  "fullScopeAllowed": true,
  "nodeReRegistrationTimeout": -1,
  "protocolMappers": [
    {
      "name": "backend-audience",
      "protocol": "openid-connect",
      "protocolMapper": "oidc-audience-mapper",
      "consentRequired": false,
      "config": {
        "included.client.audience": "backend_cli_id",
        "id.token.claim": "true",
        "lightweight.claim": "false",
        "access.token.claim": "true",
        "introspection.token.claim": "true"
      }
    }
  ],
  "defaultClientScopes": [
    "web-origins",
    "acr",
    "profile",
    "roles",
    "basic",
    "email"
  ],
  "optionalClientScopes": [
    "address",
    "phone",
    "organization",
    "offline_access",
    "microprofile-jwt"
  ],
  "access": {
    "view": true,
    "configure": true,
    "manage": true
  }
}


================================================
File: keycloak-setup-back.js
================================================
require('dotenv').config({ path: '../.env' }); // Charge le fichier .env √† la racine

const KeycloakAdminClient = require('@keycloak/keycloak-admin-client').default;
const logger = require('../core/utils/logger');

// Configuration validation
const REQUIRED_ENV_VARS = [
  'KEYCLOAK_URL',
  'KEYCLOAK_ADMIN',
  'KEYCLOAK_ADMIN_PASSWORD',
  'KEYCLOAK_REALM',
  'KEYCLOAK_CLIENT_ID',
  'KEYCLOAK_CLIENT_SECRET'
];

// Verify all required variables are present
for (const envVar of REQUIRED_ENV_VARS) {
  if (!process.env[envVar]) {
    logger.error(`‚ùå Missing environment variable: ${envVar}`);
    process.exit(1);
  }
}

const keycloakConfig = {
  baseUrl: process.env.KEYCLOAK_URL,
  realmName: 'master'
};

const adminClient = new KeycloakAdminClient(keycloakConfig);

async function setupKeycloak() {
  try {
    logger.info('üîë Authenticating to Keycloak...');
    
    await adminClient.auth({
      username: process.env.KEYCLOAK_ADMIN,
      password: process.env.KEYCLOAK_ADMIN_PASSWORD,
      grantType: 'password',
      clientId: 'admin-cli'
    });

    logger.info('‚úÖ Successfully authenticated');

    // Realm setup
    logger.info(`üîÑ Checking realm ${process.env.KEYCLOAK_REALM}...`);
    const realmExists = (await adminClient.realms.find())
      .some(r => r.realm === process.env.KEYCLOAK_REALM);

    if (!realmExists) {
      await adminClient.realms.create({
        realm: process.env.KEYCLOAK_REALM,
        enabled: true,
        displayName: `${process.env.KEYCLOAK_REALM} Realm`,
        loginTheme: "keycloak",
        accountTheme: "keycloak"
      });
      logger.info(`‚ú® Created realm: ${process.env.KEYCLOAK_REALM}`);
    } else {
      logger.info(`‚ÑπÔ∏è Realm ${process.env.KEYCLOAK_REALM} already exists`);
    }

    // Client setup
    logger.info(`üîç Checking client ${process.env.KEYCLOAK_CLIENT_ID}...`);
    const clients = await adminClient.clients.find({
      realm: process.env.KEYCLOAK_REALM,
      clientId: process.env.KEYCLOAK_CLIENT_ID
    });

    if (clients.length === 0) {
      await adminClient.clients.create({
        realm: process.env.KEYCLOAK_REALM,
        clientId: process.env.KEYCLOAK_CLIENT_ID,
        secret: process.env.KEYCLOAK_CLIENT_SECRET,
        redirectUris: [process.env.KEYCLOAK_CALLBACK_URL || 'http://localhost:2000/*'],
        webOrigins: ['*'],
        publicClient: false,
        // standardFlowEnabled: true,
        // directAccessGrantsEnabled: true,
        // serviceAccountsEnabled: true,
        // authorizationServicesEnabled: true,
        enabled: true,
        protocol: 'openid-connect',
        attributes: {
          'post.logout.redirect.uris': '+',
          'exclude.session.state.from.auth.response': 'false'
        }
      });
      logger.info(`üéØ Created client: ${process.env.KEYCLOAK_CLIENT_ID}`);
    } else {
      logger.info(`‚ÑπÔ∏è Client ${process.env.KEYCLOAK_CLIENT_ID} already exists`);
    }

    logger.info('üèÅ Keycloak setup completed successfully');
  } catch (error) {
    logger.error('üí• Keycloak setup failed:', error);
    process.exit(1);
  }
}

// Execute setup
setupKeycloak();


================================================
File: keycloak-setup-front.js
================================================
require('dotenv').config({ path: '../.env' });

const KeycloakAdminClient = require('@keycloak/keycloak-admin-client').default;

// Configuration avec valeurs par d√©faut
const config = {
  url: process.env.VITE_KEYCLOAK_URL || process.env.KEYCLOAK_URL || 'http://localhost:8080',
  realm: process.env.VITE_KEYCLOAK_REALM || 'dcat_realm', // On utilise le realm existant
  clientId: 'frontend_cli_id',
  adminUser: process.env.KEYCLOAK_ADMIN || 'admin',
  adminPass: process.env.KEYCLOAK_ADMIN_PASSWORD || 'admin',
  appUser: process.env.APP_USER || 'frontend_user',
  appPassword: process.env.APP_PASSWORD || 'frontend_password123',
  appEmail: process.env.APP_EMAIL || 'frontend.user@example.com'
};

console.log('‚öôÔ∏è Configuration utilis√©e :');
console.log(config);

const adminClient = new KeycloakAdminClient({
  baseUrl: config.url,
  realmName: 'master',
});

async function setupKeycloak() {
  try {
    // 1. Authentification admin
    console.log('üîê Connexion √† Keycloak...');
    await adminClient.auth({
      username: config.adminUser,
      password: config.adminPass,
      grantType: 'password',
      clientId: 'admin-cli',
    });
    console.log('‚úÖ Connect√© avec succ√®s');

    // 2. V√©rification/cr√©ation du realm si n√©cessaire
    console.log(`üîÑ V√©rification du realm ${config.realm}...`);
    const realmExists = (await adminClient.realms.find()).some(r => r.realm === config.realm);
    
    if (!realmExists) {
      await adminClient.realms.create({
        realm: config.realm,
        enabled: true,
        sslRequired: process.env.NODE_ENV === 'production' ? 'external' : 'none',
        loginTheme: 'keycloak'
      });
      console.log(`üÜï Realm cr√©√© : ${config.realm}`);
    } else {
      console.log(`‚ÑπÔ∏è Realm existant : ${config.realm}`);
    }

    // 3. Cr√©ation du client frontend
    console.log(`üîç V√©rification du client ${config.clientId}...`);
    const clients = await adminClient.clients.find({
      realm: config.realm,
      clientId: config.clientId
    });

    if (clients.length === 0) {
      await adminClient.clients.create({
        realm: config.realm,
        clientId: config.clientId,
        publicClient: true,
        redirectUris: [
          'http://localhost:2000/*',
          'http://localhost:5173/*',
          `${process.env.APP_URL}/*` || ''
        ].filter(Boolean),
        webOrigins: ['*'],
        standardFlowEnabled: true,
        directAccessGrantsEnabled: true,
        enabled: true,
        attributes: {
          'post.logout.redirect.uris': '+',
          'exclude.session.state.from.auth.response': 'false'
        }
      });
      console.log(`üÜï Client frontend cr√©√© : ${config.clientId}`);
    } else {
      console.log(`‚ÑπÔ∏è Client frontend existant : ${config.clientId}`);
    }

    // 4. Cr√©ation du r√¥le 'frontend_user' sp√©cifique
    // console.log(`üëî Cr√©ation du r√¥le 'frontend_user'...`);
    // try {
    //   await adminClient.roles.create({
    //     realm: config.realm,
    //     // name: 'frontend_user'
    //   });
    //   console.log(`üÜï R√¥le 'frontend_user' cr√©√©`);
    // } catch (roleError) {
    //   if (roleError.response?.status !== 409) {
    //     throw roleError;
    //   }
    //   console.log(`‚ÑπÔ∏è R√¥le 'frontend_user' existe d√©j√†`);
    // }

    // 5. Cr√©ation de l'utilisateur frontend sp√©cifique
    console.log(`üë§ Cr√©ation de l'utilisateur ${config.appUser}...`);
    const users = await adminClient.users.find({
      realm: config.realm,
      username: config.appUser
    });

    if (users.length === 0) {
      const newUser = await adminClient.users.create({
        realm: config.realm,
        username: config.appUser,
        email: config.appEmail,
        enabled: true,
        credentials: [{
          type: 'password',
          value: config.appPassword,
          temporary: false
        }]
      });

      // Assignation du r√¥le sp√©cifique
      // const role = await adminClient.roles.findOneByName({
      //   realm: config.realm,
      //   name: 'frontend_user'
      // });
      
      // await adminClient.users.addRealmRoleMappings({
      //   realm: config.realm,
      //   id: newUser.id,
      //   roles: [{
      //     id: role.id,
      //     name: role.name
      //   }]
      // });

      console.log(`üÜï Utilisateur frontend cr√©√© : ${config.appUser}`);
      console.log(`üîë Identifiants : ${config.appUser}/${config.appPassword}`);
      // console.log(`üéØ R√¥le attribu√© : frontend_user`);
    } else {
      console.log(`‚ÑπÔ∏è Utilisateur existant : ${config.appUser}`);
    }

    console.log('üéâ Configuration frontend termin√©e avec succ√®s !');
    console.log(`üåê URL du realm: ${config.url}/realms/${config.realm}`);
    console.log(`üîë Client ID: ${config.clientId}`);

  } catch (error) {
    console.error('üí• Erreur lors de la configuration:', error.response?.data || error.message);
    process.exit(1);
  }
}

setupKeycloak();


================================================
File: keycloak-setup.js
================================================
require('dotenv').config();
const KeycloakAdminClient = require('@keycloak/keycloak-admin-client').default;

const config = {
  url: process.env.KEYCLOAK_URL,
  realm: process.env.KEYCLOAK_REALM,
  backend: {
    clientId: process.env.BACKEND_CLIENT_ID,
    secret: process.env.BACKEND_CLIENT_SECRET,
    callback: process.env.BACKEND_CALLBACK_URL
  },
  frontend: {
    clientId: process.env.FRONTEND_CLIENT_ID,
    callback: process.env.FRONTEND_CALLBACK_URL
  }
};

async function setupKeycloak() {
  const adminClient = new KeycloakAdminClient({
    baseUrl: config.url,
    realmName: 'master'
  });

  try {
    // Authentification admin
    await adminClient.auth({
      username: process.env.KEYCLOAK_ADMIN,
      password: process.env.KEYCLOAK_ADMIN_PASSWORD,
      grantType: 'password',
      clientId: 'admin-cli'
    });

    // Cr√É¬©ation du realm
    await adminClient.realms.create({
      realm: config.realm,
      enabled: true,
      sslRequired: 'none'
    });

    // Configuration Backend Client
    await adminClient.clients.create({
      clientId: config.backend.clientId,
      secret: config.backend.secret,
      bearerOnly: true,
      enabled: true
    });

    // Configuration Frontend Client
    await adminClient.clients.create({
      clientId: config.frontend.clientId,
      publicClient: true,
      redirectUris: [config.frontend.callback],
      webOrigins: ['*'],
      standardFlowEnabled: true
    });

    console.log('√¢≈ì‚Ä¶ Setup complet avec succ√É¬®s');
  } catch (error) {
    console.error('Erreur:', error.response?.data || error.message);
  }
}

setupKeycloak();

