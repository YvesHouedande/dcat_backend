Directory structure:
└── users/
    ├── controllers/
    │   ├── sync.controller.js
    │   └── users.controller.js
    ├── routes/
    │   └── users.routes.js
    ├── services/
    │   └── users.service.js
    └── tests/

================================================
File: controllers/sync.controller.js
================================================
const { db } = require('../../../core/database/config');
const { employes } = require('../../../core/database/models');
const { eq } = require('drizzle-orm');
const logger = require('../../../core/utils/logger');

module.exports = {
  /**
   * Synchronisation utilisateur
   */
  syncUser: async (req, res) => {
    const token = req.kauth.grant.access_token;
    const { email, firstName, lastName } = req.body;

    if (token.content.email !== email) {
      logger.warn('IncohÃ©rence email/token', {
        tokenEmail: token.content.email,
        providedEmail: email
      });
      return res.status(400).json({ error: "Email ne correspond pas au token" });
    }

    try {
      const result = await db.insert(employes)
        .values({
          keycloak_id: token.content.sub,
          email: token.content.email,
          nom: token.content.given_name || firstName,
          prenom: token.content.family_name || lastName,
          status: 'actif',
          fonctionId: 1
        })
        .onConflictDoUpdate({
          target: employes.keycloak_id,
          set: {
            email: token.content.email,
            nom: token.content.given_name || firstName,
            prenom: token.content.family_name || lastName,
            updated_at: new Date()
          }
        });

      res.status(204).end();
    } catch (error) {
      logger.error('Erreur de synchronisation', {
        error: error.message,
        userId: token.content.sub
      });
      res.status(500).json({ error: "Ã‰chec de la synchronisation" });
    }
  }
};


================================================
File: controllers/users.controller.js
================================================
ï»¿const logger = require('../../../core/utils/logger');
const userService = require('../services/users.service');

module.exports = {
  /**
   * RÃ©cupÃ¨re tous les utilisateurs
   */
  getAllUsers: async (req, res, next) => {
    try {
      const users = await userService.getAllUsers();
      logger.info(`RÃ©cupÃ©ration de ${users.length} utilisateurs`);
      res.json(users);
    } catch (error) {
      logger.error('Ã‰chec de rÃ©cupÃ©ration des utilisateurs:', {
        error: error.message,
        stack: error.stack
      });
      next(error);
    }
  }
};


================================================
File: routes/users.routes.js
================================================
ï»¿// const express = require('express');
// const router = express.Router();
// const { protect } = require('../../../core/auth/middleware');
// const UsersController = require('../controllers/users.controller');
// const logger = require('../../../core/utils/logger');

// // Route publique
// // router.post('/sync', UsersController.syncUser);


// router.get('/', protect(['admin_back']), (req, res, next) => {
//   // Log structurÃ© avec Winston
//   logger.info('AccÃ¨s Ã  /api/users', {
//     tokenContent: req.kauth.grant.access_token.content,
//     user: {
//       id: req.kauth.grant.access_token.content.sub,
//       roles: req.kauth.grant.access_token.content.realm_access?.roles
//     }
//   });
  
//   UsersController.getAllUsers(req, res, next);
// });


// module.exports = router;



const express = require('express');
const router = express.Router();
const { protect } = require('../../../core/auth/middleware');
const UsersController = require('../controllers/users.controller');
const SyncController = require('../controllers/sync.controller'); // Import du contrÃ´leur de sync

router.get('/', 
  protect(['admin_back']), 
  UsersController.getAllUsers
);

// Route de synchronisation
router.post('/sync', 
  protect(),
  SyncController.syncUser
);

module.exports = router;


================================================
File: services/users.service.js
================================================
const { db } = require('../../../core/database/config');
const { employes } = require('../../../core/database/models');
const { eq } = require('drizzle-orm');

module.exports = {
  /**
   * RÃ©cupÃ¨re tous les utilisateurs avec pagination
   */
  getAllUsers: async (page = 1, limit = 10) => {
    try {
      return await db.select({
        id: employes.id,
        email: employes.email,
        prenom: employes.prenom,
        nom: employes.nom,
        status: employes.status
      })
      .from(employes)
      .orderBy(employes.nom)
      .limit(limit)
      .offset((page - 1) * limit)
      .execute();
    } catch (error) {
      throw new Error(`Ã‰chec de rÃ©cupÃ©ration des utilisateurs: ${error.message}`);
    }
  }
};


